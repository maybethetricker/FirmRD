import logging
import os
from use_define.use_define import sink_check
from use_define.lib_func_summarizer import Lib_global_info
import shutil
import argparse

#use hard coded keywords as taint source to analyse a single binary file
def use_hard_coded_keywords(args):
    prune_info=Lib_global_info()
    prune_info.clear_singleton_info("")
    try:
        sink_check(args.file,args.key,args.output)
    except Exception as e:
        print(args.file,"check sink error",e)

#use the front analysise of satc to find user input keywords and border binaries, then analyse the border binaries
def use_satc_keywords(args):
    from satc import front_analysise
    
    xref_API="ghidra"
    if args.xref_API=="angr":
        xref_API=args.xref_API
    enable_symbolic_check=True
    if args.symbolic_check=="False":
        enable_symbolic_check=False
    front_result_output = os.path.join(args.output, "keyword_extract_result")
    direct_back_result_output = os.path.join(args.output, "back_analyse_result")
    func_summary_output = os.path.join(args.output, "func_summary_output")
    if not os.path.isdir(direct_back_result_output):
        os.makedirs(direct_back_result_output)
    if not os.path.isdir(func_summary_output):
        os.makedirs(func_summary_output)
    if not os.path.isdir(front_result_output):
        os.makedirs(front_result_output)
    bin_list = front_analysise(args, front_result_output)
    #initialize lib_prune_info
    prune_info=Lib_global_info()
    prune_info.clear_singleton_info(args.directory)
    for binname, binpath in bin_list:
        keyword_file = os.path.join(front_result_output, "simple", ".data", binname + ".result")
        output_name = os.path.join(direct_back_result_output, "{}.result".format(binname))
        if os.path.exists(output_name):
            continue
        #print(output_name)
        try:
            sink_check(binpath,keyword_file,output_name,xref_API,enable_symbolic_check)
        except Exception as e:
            print(binname,"check sink error",e)
        if os.path.exists(output_name):
            shutil.copy2(binpath, direct_back_result_output)
            print("analysing",binname,"done")
    lib_info_instance=Lib_global_info()
    lib_info_instance.output_all_function_summaries(os.path.join(func_summary_output, "func_summary.result"))
       

if __name__ == "__main__":
    logging.getLogger("angr").setLevel(logging.FATAL)
    logging.getLogger("cle").setLevel(logging.FATAL)
    logging.getLogger("claripy").setLevel(logging.FATAL)

    parser = argparse.ArgumentParser(description='Use the tool to analyse a single binary giving several user input keywords')
    parser.add_argument("-m", "--mode", required=False, help="the analyse mode, satc/hardcode, satc mode which uses keywords generated by satc front analysis by default")
    # args for the satc keyword mode
    parser.add_argument("-d", "--directory", required=False, help="The file to be analysed")
    parser.add_argument("-o", "--output", required=True, help="The output directory")
    parser.add_argument("-x", "--xref_API", required=False, help="use \"ghidra\" or \"angr\" API to analyse xref, ghidra by default")
    parser.add_argument("-s", "--symbolic_check", required=False, help="enable symbolic execution check module when it is set to be True, True by default")
    # some other arguments required by the front analysis module of satc
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-b", "--bin", required=False, action="append", metavar="/var/ac18/bin/httpd",
                       help="Input border bin")
    group.add_argument("-l", "--len", required=False, default=100, type=int, metavar="100", help="Consider all binaries")
    # args for the hardcoded keyword mode
    parser.add_argument("-f", "--file", required=False, help="The file to be analysed")
    parser.add_argument("-k", "--key", required=False, help="The file containing the user input keywords")
    args = parser.parse_args()
    if args.mode=="hardcode":
        if not args.file:
            print("using hardcoded mode, please add the path to the binary file to be analysed by -f/--file")
            exit()
        if not args.key:
            print("using hardcoded mode, please add the path to the hardcoded keyword file by -k/--key")
            exit()
        use_hard_coded_keywords(args)
    else:
        if not args.directory:
            print("using satc mode, please add the path to the firmware file system to be analysed by -d/--directory")
            exit()
        use_satc_keywords(args)
